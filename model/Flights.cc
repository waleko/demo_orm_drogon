/**
 *
 *  Flights.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Flights.h"
#include "Planets.h"
#include "Spacecrafts.h"
#include "Tickets.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Flights::Cols::_num = "num";
const std::string Flights::Cols::_planet_id = "planet_id";
const std::string Flights::Cols::_spacecraft_id = "spacecraft_id";
const std::string Flights::primaryKeyName = "num";
const bool Flights::hasPrimaryKey = true;
const std::string Flights::tableName = "flights";

const std::vector<typename Flights::MetaData> Flights::metaData_={
{"num","int32_t","integer",4,0,1,1},
{"planet_id","int32_t","integer",4,0,0,1},
{"spacecraft_id","int32_t","integer",4,0,0,1}
};
const std::string &Flights::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Flights::Flights(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["num"].isNull())
        {
            num_=std::make_shared<int32_t>(r["num"].as<int32_t>());
        }
        if(!r["planet_id"].isNull())
        {
            planetId_=std::make_shared<int32_t>(r["planet_id"].as<int32_t>());
        }
        if(!r["spacecraft_id"].isNull())
        {
            spacecraftId_=std::make_shared<int32_t>(r["spacecraft_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            num_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            planetId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            spacecraftId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Flights::Flights(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            num_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            planetId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            spacecraftId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

Flights::Flights(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("num"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["num"].isNull())
        {
            num_=std::make_shared<int32_t>((int32_t)pJson["num"].asInt64());
        }
    }
    if(pJson.isMember("planet_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["planet_id"].isNull())
        {
            planetId_=std::make_shared<int32_t>((int32_t)pJson["planet_id"].asInt64());
        }
    }
    if(pJson.isMember("spacecraft_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["spacecraft_id"].isNull())
        {
            spacecraftId_=std::make_shared<int32_t>((int32_t)pJson["spacecraft_id"].asInt64());
        }
    }
}

void Flights::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            num_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            planetId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            spacecraftId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

void Flights::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("num"))
    {
        if(!pJson["num"].isNull())
        {
            num_=std::make_shared<int32_t>((int32_t)pJson["num"].asInt64());
        }
    }
    if(pJson.isMember("planet_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["planet_id"].isNull())
        {
            planetId_=std::make_shared<int32_t>((int32_t)pJson["planet_id"].asInt64());
        }
    }
    if(pJson.isMember("spacecraft_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["spacecraft_id"].isNull())
        {
            spacecraftId_=std::make_shared<int32_t>((int32_t)pJson["spacecraft_id"].asInt64());
        }
    }
}

const int32_t &Flights::getValueOfNum() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(num_)
        return *num_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Flights::getNum() const noexcept
{
    return num_;
}
void Flights::setNum(const int32_t &pNum) noexcept
{
    num_ = std::make_shared<int32_t>(pNum);
    dirtyFlag_[0] = true;
}
const typename Flights::PrimaryKeyType & Flights::getPrimaryKey() const
{
    assert(num_);
    return *num_;
}

const int32_t &Flights::getValueOfPlanetId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(planetId_)
        return *planetId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Flights::getPlanetId() const noexcept
{
    return planetId_;
}
void Flights::setPlanetId(const int32_t &pPlanetId) noexcept
{
    planetId_ = std::make_shared<int32_t>(pPlanetId);
    dirtyFlag_[1] = true;
}

const int32_t &Flights::getValueOfSpacecraftId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(spacecraftId_)
        return *spacecraftId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Flights::getSpacecraftId() const noexcept
{
    return spacecraftId_;
}
void Flights::setSpacecraftId(const int32_t &pSpacecraftId) noexcept
{
    spacecraftId_ = std::make_shared<int32_t>(pSpacecraftId);
    dirtyFlag_[2] = true;
}

void Flights::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Flights::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "num",
        "planet_id",
        "spacecraft_id"
    };
    return inCols;
}

void Flights::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getNum())
        {
            binder << getValueOfNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPlanetId())
        {
            binder << getValueOfPlanetId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSpacecraftId())
        {
            binder << getValueOfSpacecraftId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Flights::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Flights::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getNum())
        {
            binder << getValueOfNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPlanetId())
        {
            binder << getValueOfPlanetId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSpacecraftId())
        {
            binder << getValueOfSpacecraftId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Flights::toJson() const
{
    Json::Value ret;
    if(getNum())
    {
        ret["num"]=getValueOfNum();
    }
    else
    {
        ret["num"]=Json::Value();
    }
    if(getPlanetId())
    {
        ret["planet_id"]=getValueOfPlanetId();
    }
    else
    {
        ret["planet_id"]=Json::Value();
    }
    if(getSpacecraftId())
    {
        ret["spacecraft_id"]=getValueOfSpacecraftId();
    }
    else
    {
        ret["spacecraft_id"]=Json::Value();
    }
    return ret;
}

Json::Value Flights::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getNum())
            {
                ret[pMasqueradingVector[0]]=getValueOfNum();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPlanetId())
            {
                ret[pMasqueradingVector[1]]=getValueOfPlanetId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getSpacecraftId())
            {
                ret[pMasqueradingVector[2]]=getValueOfSpacecraftId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getNum())
    {
        ret["num"]=getValueOfNum();
    }
    else
    {
        ret["num"]=Json::Value();
    }
    if(getPlanetId())
    {
        ret["planet_id"]=getValueOfPlanetId();
    }
    else
    {
        ret["planet_id"]=Json::Value();
    }
    if(getSpacecraftId())
    {
        ret["spacecraft_id"]=getValueOfSpacecraftId();
    }
    else
    {
        ret["spacecraft_id"]=Json::Value();
    }
    return ret;
}

bool Flights::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("num"))
    {
        if(!validJsonOfField(0, "num", pJson["num"], err, true))
            return false;
    }
    else
    {
        err="The num column cannot be null";
        return false;
    }
    if(pJson.isMember("planet_id"))
    {
        if(!validJsonOfField(1, "planet_id", pJson["planet_id"], err, true))
            return false;
    }
    else
    {
        err="The planet_id column cannot be null";
        return false;
    }
    if(pJson.isMember("spacecraft_id"))
    {
        if(!validJsonOfField(2, "spacecraft_id", pJson["spacecraft_id"], err, true))
            return false;
    }
    else
    {
        err="The spacecraft_id column cannot be null";
        return false;
    }
    return true;
}
bool Flights::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Flights::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("num"))
    {
        if(!validJsonOfField(0, "num", pJson["num"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("planet_id"))
    {
        if(!validJsonOfField(1, "planet_id", pJson["planet_id"], err, false))
            return false;
    }
    if(pJson.isMember("spacecraft_id"))
    {
        if(!validJsonOfField(2, "spacecraft_id", pJson["spacecraft_id"], err, false))
            return false;
    }
    return true;
}
bool Flights::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Flights::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
void Flights::getPlanets(const DbClientPtr &clientPtr,
                         const std::function<void(Planets)> &rcb,
                         const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from planets where id = $1";
    *clientPtr << sql
               << *planetId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Planets(r[0]));
                    }
               }
               >> ecb;
}
void Flights::getSpacecrafts(const DbClientPtr &clientPtr,
                             const std::function<void(Spacecrafts)> &rcb,
                             const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from spacecrafts where id = $1";
    *clientPtr << sql
               << *spacecraftId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Spacecrafts(r[0]));
                    }
               }
               >> ecb;
}
void Flights::getTickets(const DbClientPtr &clientPtr,
                         const std::function<void(std::vector<Tickets>)> &rcb,
                         const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from tickets where flight_num = $1";
    *clientPtr << sql
               << *num_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Tickets> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Tickets(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
