/**
 *
 *  Tickets.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Tickets.h"
#include "Flights.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Tickets::Cols::_flight_num = "flight_num";
const std::string Tickets::Cols::_pax_name = "pax_name";
const std::string Tickets::Cols::_price = "price";
const std::string Tickets::primaryKeyName = "";
const bool Tickets::hasPrimaryKey = false;
const std::string Tickets::tableName = "tickets";

const std::vector<typename Tickets::MetaData> Tickets::metaData_={
{"flight_num","int32_t","integer",4,0,0,1},
{"pax_name","std::string","character varying",0,0,0,0},
{"price","int32_t","integer",4,0,0,0}
};
const std::string &Tickets::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Tickets::Tickets(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["flight_num"].isNull())
        {
            flightNum_=std::make_shared<int32_t>(r["flight_num"].as<int32_t>());
        }
        if(!r["pax_name"].isNull())
        {
            paxName_=std::make_shared<std::string>(r["pax_name"].as<std::string>());
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<int32_t>(r["price"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            flightNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            paxName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            price_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Tickets::Tickets(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            flightNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            paxName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

Tickets::Tickets(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("flight_num"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["flight_num"].isNull())
        {
            flightNum_=std::make_shared<int32_t>((int32_t)pJson["flight_num"].asInt64());
        }
    }
    if(pJson.isMember("pax_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["pax_name"].isNull())
        {
            paxName_=std::make_shared<std::string>(pJson["pax_name"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson["price"].asInt64());
        }
    }
}

void Tickets::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            flightNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            paxName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

void Tickets::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("flight_num"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["flight_num"].isNull())
        {
            flightNum_=std::make_shared<int32_t>((int32_t)pJson["flight_num"].asInt64());
        }
    }
    if(pJson.isMember("pax_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["pax_name"].isNull())
        {
            paxName_=std::make_shared<std::string>(pJson["pax_name"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson["price"].asInt64());
        }
    }
}

const int32_t &Tickets::getValueOfFlightNum() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(flightNum_)
        return *flightNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tickets::getFlightNum() const noexcept
{
    return flightNum_;
}
void Tickets::setFlightNum(const int32_t &pFlightNum) noexcept
{
    flightNum_ = std::make_shared<int32_t>(pFlightNum);
    dirtyFlag_[0] = true;
}

const std::string &Tickets::getValueOfPaxName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(paxName_)
        return *paxName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tickets::getPaxName() const noexcept
{
    return paxName_;
}
void Tickets::setPaxName(const std::string &pPaxName) noexcept
{
    paxName_ = std::make_shared<std::string>(pPaxName);
    dirtyFlag_[1] = true;
}
void Tickets::setPaxName(std::string &&pPaxName) noexcept
{
    paxName_ = std::make_shared<std::string>(std::move(pPaxName));
    dirtyFlag_[1] = true;
}
void Tickets::setPaxNameToNull() noexcept
{
    paxName_.reset();
    dirtyFlag_[1] = true;
}

const int32_t &Tickets::getValueOfPrice() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tickets::getPrice() const noexcept
{
    return price_;
}
void Tickets::setPrice(const int32_t &pPrice) noexcept
{
    price_ = std::make_shared<int32_t>(pPrice);
    dirtyFlag_[2] = true;
}
void Tickets::setPriceToNull() noexcept
{
    price_.reset();
    dirtyFlag_[2] = true;
}

void Tickets::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Tickets::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "flight_num",
        "pax_name",
        "price"
    };
    return inCols;
}

void Tickets::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getFlightNum())
        {
            binder << getValueOfFlightNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPaxName())
        {
            binder << getValueOfPaxName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Tickets::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Tickets::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getFlightNum())
        {
            binder << getValueOfFlightNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPaxName())
        {
            binder << getValueOfPaxName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Tickets::toJson() const
{
    Json::Value ret;
    if(getFlightNum())
    {
        ret["flight_num"]=getValueOfFlightNum();
    }
    else
    {
        ret["flight_num"]=Json::Value();
    }
    if(getPaxName())
    {
        ret["pax_name"]=getValueOfPaxName();
    }
    else
    {
        ret["pax_name"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    return ret;
}

Json::Value Tickets::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getFlightNum())
            {
                ret[pMasqueradingVector[0]]=getValueOfFlightNum();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPaxName())
            {
                ret[pMasqueradingVector[1]]=getValueOfPaxName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[2]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getFlightNum())
    {
        ret["flight_num"]=getValueOfFlightNum();
    }
    else
    {
        ret["flight_num"]=Json::Value();
    }
    if(getPaxName())
    {
        ret["pax_name"]=getValueOfPaxName();
    }
    else
    {
        ret["pax_name"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    return ret;
}

bool Tickets::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("flight_num"))
    {
        if(!validJsonOfField(0, "flight_num", pJson["flight_num"], err, true))
            return false;
    }
    else
    {
        err="The flight_num column cannot be null";
        return false;
    }
    if(pJson.isMember("pax_name"))
    {
        if(!validJsonOfField(1, "pax_name", pJson["pax_name"], err, true))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(2, "price", pJson["price"], err, true))
            return false;
    }
    return true;
}
bool Tickets::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tickets::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("flight_num"))
    {
        if(!validJsonOfField(0, "flight_num", pJson["flight_num"], err, false))
            return false;
    }
    if(pJson.isMember("pax_name"))
    {
        if(!validJsonOfField(1, "pax_name", pJson["pax_name"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(2, "price", pJson["price"], err, false))
            return false;
    }
    return true;
}
bool Tickets::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tickets::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
void Tickets::getFlights(const DbClientPtr &clientPtr,
                         const std::function<void(Flights)> &rcb,
                         const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from flights where num = $1";
    *clientPtr << sql
               << *flightNum_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Flights(r[0]));
                    }
               }
               >> ecb;
}
